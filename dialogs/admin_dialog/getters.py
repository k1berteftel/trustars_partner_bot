import os
import datetime

from aiogram import Bot
from aiogram.types import CallbackQuery, User, Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.enums.chat_action import ChatAction
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.api.entities import MediaAttachment
from aiogram_dialog.widgets.kbd import Button, Select
from aiogram_dialog.widgets.input import ManagedTextInput, MessageInput
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from utils.build_ids import get_random_id
from utils.schedulers import send_messages
from database.action_data_class import DataInteraction
from config_data.config import load_config, Config
from states.state_groups import startSG, adminSG


config: Config = load_config()


async def menu_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    users = await session.get_users()
    admin = await session.get_admin(event_from_user.id)
    active = 0
    entry = {
        'today': 0,
        'yesterday': 0,
        '2_day_ago': 0
    }
    activity = 0
    for user in users:
        if user.active:
            active += 1
        for day in range(0, 3):
            #print(user.entry.date(), (datetime.datetime.today() - datetime.timedelta(days=day)).date())
            if user.entry.date() == (datetime.datetime.today() - datetime.timedelta(days=day)).date():
                if day == 0:
                    entry['today'] = entry.get('today') + 1
                elif day == 1:
                    entry['yesterday'] = entry.get('yesterday') + 1
                else:
                    entry['2_day_ago'] = entry.get('2_day_ago') + 1
        if user.activity.timestamp() > (datetime.datetime.today() - datetime.timedelta(days=1)).timestamp():
            activity += 1

    statistic = await session.get_bot_static()
    text = (f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {datetime.datetime.today().strftime("%d-%m-%Y")}</b>\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}'
            f'\n - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏(–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞): {active}\n - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ '
            f'–±–æ—Ç–∞: {len(users) - active}\n - –ü—Ä–æ–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {activity}\n\n'
            f'<b>–ü—Ä–∏—Ä–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏:</b>\n - –ó–∞ —Å–µ–≥–æ–¥–Ω—è: +{entry.get("today")}\n - –í—á–µ—Ä–∞: +{entry.get("yesterday")}'
            f'\n - –ü–æ–∑–∞–≤—á–µ—Ä–∞: + {entry.get("2_day_ago")}\n\n<b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {statistic.earn}‚ÇΩ \n'
            f' - –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {statistic.payments}\n - –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {statistic.buys}‚ÇΩ \n')  # <b>–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏</b>:
    return {
        'text': text,
        'full': admin.rate == 'full'
    }


async def refresh_static(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    await dialog_manager.switch_to(adminSG.start)


async def extend_message(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    web_app = WebAppInfo(url=config.bot.webhook_url + 'rates')
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='‚≠êÔ∏è–ü—Ä–æ–¥–ª–∏—Ç—å', web_app=web_app)]]
    )
    await clb.message.answer(
        text='<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–∞—Ä—Ç–Ω–µ—Ä!</b> –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ '
             '–ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!üí∞',
        reply_markup=keyboard)


async def check_activity(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    msg = await clb.message.answer('üîÑ–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞')
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    admin = await session.get_admin(clb.from_user.id)
    users = await session.get_users()
    bot = Bot(admin.bot.token)
    for user in users:
        try:
            await bot.send_chat_action(
                chat_id=user.user_id,
                action=ChatAction.TYPING
            )
            if not user.active:
                await session.set_active(user.user_id, 1)
        except Exception as err:
            if user.active:
                await session.set_active(user.user_id, 0)
    await msg.delete()
    await clb.message.answer('<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b>')
    await dialog_manager.switch_to(adminSG.start)


async def get_users_txt(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    users = await session.get_users()
    with open('users.txt', 'a+') as file:
        for user in users:
            file.write(f'{user.user_id}\n')
    await clb.message.answer_document(
        document=FSInputFile(path='users.txt')
    )
    try:
        os.remove('users.txt')
    except Exception:
        ...


async def deeplink_menu_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    admin = await session.get_admin(event_from_user.id)
    bot = Bot(token=admin.bot.token)
    bot_data = await bot.get_me()
    links = await session.get_deeplinks()
    text = ''
    for link in links:
        text += f'https://t.me/{bot_data.username}?start={link.link}: {link.entry}\n'  # –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –∏ –ø–æ–º–µ–Ω—è—Ç—å
    return {'links': text}


async def add_deeplink(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    await session.add_deeplink(get_random_id())
    await dialog_manager.switch_to(adminSG.deeplink_menu)


async def del_deeplink(clb: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    await session.del_deeplink(item_id)
    await clb.answer('–°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω–∞')
    await dialog_manager.switch_to(adminSG.deeplink_menu)


async def del_deeplink_getter(dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    links = await session.get_deeplinks()
    buttons = []
    for link in links:
        buttons.append((f'{link.link}: {link.entry}', link.link))
    return {'items': buttons}


async def set_charge_getter(dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    static = await session.get_bot_static()
    return {
        'charge': static.charge
    }


async def get_charge(msg: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    try:
        charge = int(text)
    except Exception:
        await msg.answer('‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ (–æ—Ç 0 –¥–æ 100')
        return
    if not (10 <= charge < 100):
        await msg.answer('‚ùóÔ∏è–ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10% –∏ –Ω–µ –±–æ–ª–µ–µ 100%')
        return
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    await session.set_charge(charge)
    await dialog_manager.switch_to(adminSG.set_charge)


async def get_mail(msg: Message, widget: MessageInput, dialog_manager: DialogManager):
    if msg.text:
        dialog_manager.dialog_data['text'] = msg.text
    elif msg.photo:
        dialog_manager.dialog_data['photo'] = msg.photo[0].file_id
        dialog_manager.dialog_data['caption'] = msg.caption
    elif msg.video:
        dialog_manager.dialog_data['video'] = msg.video.file_id
        dialog_manager.dialog_data['caption'] = msg.caption
    else:
        await msg.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    await dialog_manager.switch_to(adminSG.get_time)


async def get_time(msg: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    try:
        time = datetime.datetime.strptime(text, '%H:%M %d.%m')
    except Exception as err:
        print(err)
        await msg.answer('–í—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return
    dialog_manager.dialog_data['time'] = text
    await dialog_manager.switch_to(adminSG.get_keyboard)


async def get_mail_keyboard(msg: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    try:
        buttons = text.strip().split('\n')
        keyboard: list[tuple] = [(i.split('-')[0].strip(), i.split('-')[1].strip()) for i in buttons]
    except Exception as err:
        print(err)
        await msg.answer('–í—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return
    dialog_manager.dialog_data['keyboard'] = keyboard
    await dialog_manager.switch_to(adminSG.confirm_mail)


async def cancel_malling(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(adminSG.start)


async def start_malling(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    scheduler: AsyncIOScheduler = dialog_manager.middleware_data.get('scheduler')
    time = dialog_manager.dialog_data.get('time')
    keyboard = dialog_manager.dialog_data.get('keyboard')
    if keyboard:
        keyboard = [InlineKeyboardButton(text=i[0], url=i[1]) for i in keyboard]
    users = await session.get_users()
    admin = await session.get_admin(clb.from_user.id)
    bot = Bot(token=admin.bot.token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    if not time:
        if dialog_manager.dialog_data.get('text'):
            text: str = dialog_manager.dialog_data.get('text')
            for user in users:
                try:
                    await bot.send_message(
                        chat_id=user.user_id,
                        text=text.format(name=user.name),
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[keyboard]) if keyboard else None
                    )
                    if user.active == 0:
                        await session.set_active(user.user_id, 1)
                except Exception as err:
                    print(err)
                    await session.set_active(user.user_id, 0)
        elif dialog_manager.dialog_data.get('caption'):
            caption: str = dialog_manager.dialog_data.get('caption')
            if dialog_manager.dialog_data.get('photo'):
                for user in users:
                    try:
                        await bot.send_photo(
                            chat_id=user.user_id,
                            photo=dialog_manager.dialog_data.get('photo'),
                            caption=caption.format(name=user.name),
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[keyboard]) if keyboard else None
                        )
                        if user.active == 0:
                            await session.set_active(user.user_id, 1)
                    except Exception as err:
                        print(err)
                        await session.set_active(user.user_id, 0)
            else:
                for user in users:
                    try:
                        await bot.send_video(
                            chat_id=user.user_id,
                            video=dialog_manager.dialog_data.get('video'),
                            caption=caption.format(name=user.name),
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[keyboard]) if keyboard else None
                        )
                        if user.active == 0:
                            await session.set_active(user.user_id, 1)
                    except Exception as err:
                        print(err)
                        await session.set_active(user.user_id, 0)
    else:
        date = datetime.datetime.strptime(time, '%H:%M %d.%m')
        date = date.replace(year=datetime.datetime.now().year)
        scheduler.add_job(
            func=send_messages,
            args=[bot, session, InlineKeyboardMarkup(inline_keyboard=[keyboard]) if keyboard else None],
            kwargs={
                'text': dialog_manager.dialog_data.get('text'),
                'caption': dialog_manager.dialog_data.get('caption'),
                'photo': dialog_manager.dialog_data.get('photo'),
                'video': dialog_manager.dialog_data.get('video')
            },
            next_run_time=date
        )
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(adminSG.start)


async def get_derive_amount(msg: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    try:
        amount = int(text)
    except Exception:
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    static = await session.get_bot_static()
    if amount > static.earn:
        await msg.answer('‚ùóÔ∏è–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ —Ç–æ–π —á—Ç–æ —Å–µ–π—á–∞—Å —É –≤–∞—Å')
        return
    username = msg.from_user.username
    if not username:
        await msg.answer(text='‚ùóÔ∏è–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —é–∑–µ—Ä–Ω–µ–π–º')
        return
    text = (f'<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
            f'- –ù–∏–∫–Ω–µ–π–º: {msg.from_user.name}\n - Username: @{msg.from_user.username}'
            f'\n - Telegram Id: {msg.from_user.id}\n'
            f'\n - –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {static.earn}Ô∏è‚ÇΩ \n - <b>–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>: {amount}Ô∏è‚ÇΩ ')
    for admin in config.bot.admin_ids:
        try:
            await msg.bot.send_message(
                chat_id=admin,
                text=text
            )
        except Exception:
            ...
    await session.clear_earn()
    await msg.answer('‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(adminSG.start)

